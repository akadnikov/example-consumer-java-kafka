plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
  id "au.com.dius.pact" version "4.1.7"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'au.com.dius.pact.consumer:junit5:4.3.11'
	testImplementation 'au.com.dius.pact.provider:spring:4.3.11'

	runtimeOnly 'com.h2database:h2'
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

def getGitHash = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'rev-parse', '--short', 'HEAD'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

def getGitBranch = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

pact {
	publish {
		pactDirectory = 'build/pacts'
		pactBrokerUrl = 'http://pactbroker.dev.gazprombank.ru:8000'
		pactBrokerUsername = 'pact'
		pactBrokerPassword = 'pact'
		tags = [getGitBranch()]
		consumerVersion = "v".concat(version).concat("-").concat(getGitHash())
	}
	broker {
		pactBrokerUrl = 'http://pactbroker.dev.gazprombank.ru:8000'

		// To use basic auth
		pactBrokerUsername = 'pact'
		pactBrokerPassword = 'pact'

		// OR to use a bearer token
		//pactBrokerToken = '<TOKEN>'
	}

}